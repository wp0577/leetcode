/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int fstN=0;
        int car=0;
       ListNode test=new ListNode(0);
       ListNode res=test;
        while(l1!=null||l2!=null){
            if(l1==null){
                fstN=l2.val+car;
                l2=l2.next;
            }
            else if(l2==null){
                fstN=l1.val+car;
                l1=l1.next;
            }
            else if(l1!=null&&l2!=null){

                fstN=l1.val+l2.val+car;
                l1=l1.next;
                l2=l2.next;
            }
        car=0;
        if(fstN>=10){
        res.next=new ListNode(fstN-10);
        car=1;
        }
        else{
        res.next=new ListNode(fstN);
        }
        res= res.next;
        }
        if(car==1){
            res.next=new ListNode(1);
        }
        return test.next;
    }
}

public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
    ListNode dummyHead = new ListNode(0);
    ListNode p = l1, q = l2, curr = dummyHead;
    int carry = 0;
    while (p != null || q != null) {
        int x = (p != null) ? p.val : 0;
        int y = (q != null) ? q.val : 0;
        int sum = carry + x + y;
        carry = sum / 10;
        curr.next = new ListNode(sum % 10);
        curr = curr.next;
        if (p != null) p = p.next;
        if (q != null) q = q.next;
    }
    if (carry > 0) {
        curr.next = new ListNode(carry);
    }
    return dummyHead.next;
}
