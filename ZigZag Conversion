
// this solution is copied from network. 
// In fact, this solution is more clear and smart, it only has O(n) time complexity.
// In this question, I should handle the function of StringBuffer.
// StringBuffer is not same as String, because its length can be changed and we can use append method to change it.
// StringBuffer is important for this question.
public String convert(String s, int nRows) {
    char[] c = s.toCharArray();
    int len = c.length;
    StringBuffer[] sb = new StringBuffer[nRows];
    for (int i = 0; i < sb.length; i++) sb[i] = new StringBuffer();
    
    int i = 0;
    while (i < len) {
        for (int idx = 0; idx < nRows && i < len; idx++) // vertically down
            sb[idx].append(c[i++]);
        for (int idx = nRows-2; idx >= 1 && i < len; idx--) // obliquely up
            sb[idx].append(c[i++]);
    }
    for (int idx = 1; idx < sb.length; idx++)
        sb[0].append(sb[idx]);
    return sb[0].toString();
}

//The second thinking version, And this version successed. hahhahahaha
//Although this method successed, it spends a lot of time and more space. 
// I used two-dimensional arrary for this quetion.
public class Solution {
    public String convert(String s, int numRows) {
        int rMax=numRows;
         if(rMax==1){
            return s;
        }
        int n=s.length();
        int k=0;
        int c1=n/(2*rMax-2);
        int c2=n%(2*rMax-2);
        int jMax=(c1+1)*(rMax-1);
        int k1=rMax-2;
        char[] s1=new char[n];
        s.getChars(0,n,s1,0);
        String newS[][]=new String[rMax][jMax];
        String res[]=new String[n];
        if(n<=rMax){
            return s;
            }
        if(rMax==2){
            for(int i=0;i<n;i++){
                if(2*i<n){
                newS[0][i]=String.valueOf(s1[2*i]);
                }
                if((2*i+1)<n){
                newS[1][i]=String.valueOf(s1[2*i+1]);
                }
            }
        }
        if(c1==0||(c1==1&&c2==0)){
            System.out.println("diyige");
            for(int i=0;i<rMax;i++){
                newS[i][0]=String.valueOf(s1[k]); //此方法直接将Char数组转换成String   
                k++;
            }
            for(int j=1;j<jMax;j++){
                if(k<n){
                System.out.println(k);
                newS[k1][j]=String.valueOf(s1[k]);
                k1--;
                k++;
                }
            }
        }
        int r=0;     //循环内定义的变量只有在循环内成立，所以需要在循环外定一个变量才能改变改变量的值在循环外
        if(n>(2*rMax-2)){
             System.out.println("dierge");
            for(int j=0; j<jMax; j++){
                if(j==0||j%(rMax-1)==0){
                    for(r=0;r<rMax;r++){
                        if(k<n){
                        newS[r][j]=String.valueOf(s1[k]);
                        k++;
                        }
                    }
                    r=r-2;
                }
                else{
                    if(k<n){
                    newS[r][j]=String.valueOf(s1[k]);
                    k++;
                    r--;
                    }
                }
            }
        }
        int l=0;
        for(int i=0; i<rMax;i++){
             System.out.println("disange");
            for(int j=0;j<jMax;j++){
                if(newS[i][j]!=null){
                res[l]=newS[i][j];
                l++;
                }
            }
        }
        //String res1=Arrays.toString(res);
        StringBuffer sb = new StringBuffer();
        for(int i = 0; i < res.length; i++){
         sb. append(res[i]);
        }
        String test = sb.toString();
                return test;
    }
}
//first thinking version
public class Solution {
    public String convert(String s, int numRows) {
        int rMax=numRows;
        int n=s.length();
        String newS[]=new String[n];
        int c1=n/(2*rMax-2);
        int c2=n%(2*rMax-2);
        int x=n-rMax;
        if(n==rMax){
                return s;
            }
        for(int r=rMax,int i=0;r>=1&&i<n;r--,i++){
            if(c==0){
                newS[n-1]=s.charAt(rMax-1);
                newS[0]=s.charAt(0);
                for(int i=1;i<n;i++){
                while(x>=0){
                    newS[i]=r
                }
                }
            }
        }
    }
}
